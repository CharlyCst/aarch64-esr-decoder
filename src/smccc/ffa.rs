use crate::FieldInfo;

const FFA_ERROR_32: u32 = 0x84000060;
const FFA_SUCCESS_32: u32 = 0x84000061;
const FFA_INTERRUPT_32: u32 = 0x84000062;
const FFA_VERSION_32: u32 = 0x84000063;
const FFA_FEATURES_32: u32 = 0x84000064;
const FFA_RX_RELEASE_32: u32 = 0x84000065;
const FFA_RXTX_MAP_32: u32 = 0x84000066;
const FFA_RXTX_MAP_64: u32 = 0xC4000066;
const FFA_RXTX_UNMAP_32: u32 = 0x84000067;
const FFA_PARTITION_INFO_GET_32: u32 = 0x84000068;
const FFA_ID_GET_32: u32 = 0x84000069;
const FFA_MSG_POLL_32: u32 = 0x8400006A;
const FFA_MSG_WAIT_32: u32 = 0x8400006B;
const FFA_YIELD_32: u32 = 0x8400006C;
const FFA_RUN_32: u32 = 0x8400006D;
const FFA_MSG_SEND_32: u32 = 0x8400006E;
const FFA_MSG_SEND_DIRECT_REQ_32: u32 = 0x8400006F;
const FFA_MSG_SEND_DIRECT_RESP_32: u32 = 0x84000070;
const FFA_MEM_DONATE_32: u32 = 0x84000071;
const FFA_MEM_LEND_32: u32 = 0x84000072;
const FFA_MEM_SHARE_32: u32 = 0x84000073;
const FFA_MEM_RETRIEVE_REQ_32: u32 = 0x84000074;
const FFA_MEM_RETRIEVE_RESP_32: u32 = 0x84000075;
const FFA_MEM_RELINQUISH_32: u32 = 0x84000076;
const FFA_MEM_RECLAIM_32: u32 = 0x84000077;
const FFA_MEM_FRAG_RX_32: u32 = 0x8400007A;
const FFA_MEM_FRAG_TX_32: u32 = 0x8400007B;

pub fn decode_ffa(smccc: u64) -> Option<FieldInfo> {
    let name = match smccc as u32 {
        FFA_ERROR_32 => "FFA_ERROR_32",
        FFA_SUCCESS_32 => "FFA_SUCCESS_32",
        FFA_INTERRUPT_32 => "FFA_INTERRUPT_32",
        FFA_VERSION_32 => "FFA_VERSION_32",
        FFA_FEATURES_32 => "FFA_FEATURES_32",
        FFA_RX_RELEASE_32 => "FFA_RX_RELEASE_32",
        FFA_RXTX_MAP_32 => "FFA_RXTX_MAP_32",
        FFA_RXTX_MAP_64 => "FFA_RXTX_MAP_64",
        FFA_RXTX_UNMAP_32 => "FFA_RXTX_UNMAP_32",
        FFA_PARTITION_INFO_GET_32 => "FFA_PARTITION_INFO_GET_32",
        FFA_ID_GET_32 => "FFA_ID_GET_32",
        FFA_MSG_POLL_32 => "FFA_MSG_POLL_32",
        FFA_MSG_WAIT_32 => "FFA_MSG_WAIT_32",
        FFA_YIELD_32 => "FFA_YIELD_32",
        FFA_RUN_32 => "FFA_RUN_32",
        FFA_MSG_SEND_32 => "FFA_MSG_SEND_32",
        FFA_MSG_SEND_DIRECT_REQ_32 => "FFA_MSG_SEND_DIRECT_REQ_32",
        FFA_MSG_SEND_DIRECT_RESP_32 => "FFA_MSG_SEND_DIRECT_RESP_32",
        FFA_MEM_DONATE_32 => "FFA_MEM_DONATE_32",
        FFA_MEM_LEND_32 => "FFA_MEM_LEND_32",
        FFA_MEM_SHARE_32 => "FFA_MEM_SHARE_32",
        FFA_MEM_RETRIEVE_REQ_32 => "FFA_MEM_RETRIEVE_REQ_32",
        FFA_MEM_RETRIEVE_RESP_32 => "FFA_MEM_RETRIEVE_RESP_32",
        FFA_MEM_RELINQUISH_32 => "FFA_MEM_RELINQUISH_32",
        FFA_MEM_RECLAIM_32 => "FFA_MEM_RECLAIM_32",
        FFA_MEM_FRAG_RX_32 => "FFA_MEM_FRAG_RX_32",
        FFA_MEM_FRAG_TX_32 => "FFA_MEM_FRAG_TX_32",
        _ => return None,
    };
    Some(FieldInfo::get(smccc, name, None, 0, 16))
}
